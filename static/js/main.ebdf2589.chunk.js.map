{"version":3,"sources":["context/List/listContext.js","context/List/listReducer.js","context/types.js","context/List/listState.js","context/Search/searchContext.js","context/Search/searchReducer.js","context/Search/searchState.js","Components/List.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["listContext","createContext","state","action","type","payload","ListState","props","useReducer","ListReducer","dispatch","Provider","value","list","setList","users","children","searchContext","SearchState","searchReducer","loading","setLoading","loadingState","List","useContext","ListContext","SearchContext","className","map","user","index","key","id","src","avatar_url","alt","login","href","html_url","target","rel","Search","useState","text","setText","fetchUser","a","axios","get","res","data","items","onSubmit","e","preventDefault","name","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAIeA,EAFKC,0BCAL,WAACC,EAAOC,GACrB,OAAQA,EAAOC,MACb,ICCoB,WDAlB,OAAOD,EAAOE,QAChB,QACE,OAAOH,IEuBEI,EAzBG,SAACC,GACjB,IAD2B,EAGDC,qBAAWC,EAFhB,IADM,mBAGpBP,EAHoB,KAGbQ,EAHa,KAa3B,OACE,kBAAC,EAAYC,SAAb,CACEC,MAAO,CACLC,KAAMX,EACNY,QAXU,SAACC,GACfL,EAAS,CACPN,KDRkB,WCSlBC,QAASU,OAWRR,EAAMS,WCrBEC,EAFOhB,0BCAP,WAACC,EAAOC,GACrB,OAAQA,EAAOC,MACb,IHAuB,cGCrB,OAAOD,EAAOE,QAChB,QACE,OAAOH,ICuBEgB,EAzBK,SAACX,GACnB,IAD6B,EAGHC,qBAAWW,GAFhB,GADQ,mBAGtBjB,EAHsB,KAGfQ,EAHe,KAa7B,OACE,kBAAC,EAAcC,SAAf,CACEC,MAAO,CACLQ,QAASlB,EACTmB,WAXa,SAACC,GAClBZ,EAAS,CACPN,KJTqB,cIUrBC,QAASiB,OAWRf,EAAMS,WCQEO,EA7BF,WACX,IAAMvB,EAAcwB,qBAAWC,GACzBR,EAAgBO,qBAAWE,GAEzBb,EAASb,EAATa,KAGR,OAFoBI,EAAZG,QAGC,yBAAKO,UAAU,SAAf,aACW,OAATd,EACFA,EAAKe,KAAI,SAACC,EAAMC,GACrB,OACE,yBAAKH,UAAU,OAAOI,IAAKF,EAAKG,IAC9B,yBAAKL,UAAU,cACf,yBAAKM,IAAKJ,EAAKK,WAAYC,IAAKN,EAAKO,QACrC,yBAAKT,UAAU,YACb,2BACE,0BAAMA,UAAU,SAAhB,aACA,uBAAGU,KAAMR,EAAKS,SAAUC,OAAO,SAASC,IAAI,uBACzCX,EAAKO,kBAVb,G,yCCoCMK,EA5CA,WACb,IAAMzC,EAAcwB,qBAAWC,GACzBR,EAAgBO,qBAAWE,GAFd,EAIKgB,mBAAS,IAJd,mBAIZC,EAJY,KAINC,EAJM,KAMbC,EAAS,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,gDAAmDL,IADrD,OACVM,EADU,OAEhBjD,EAAYc,QAAQmC,EAAIC,KAAKC,OAC7BlC,EAAcI,YAAW,GAHT,2CAAH,qDAkBf,OACE,6BACE,0BAAM+B,SAdO,SAACC,GAChBA,EAAEC,iBACW,KAATX,IAGF1B,EAAcI,YAAW,GACzBwB,MAQ0BlB,UAAU,QAClC,2BACEvB,KAAK,OACLmD,KAAK,OACLC,YAAY,kBACZ5C,MAAO+B,EACPc,SAVS,SAACJ,GAAD,OAAOT,EAAQS,EAAEd,OAAO3B,UAYnC,2BACER,KAAK,SACLQ,MAAM,SACNe,UAAU,8BCrBL+B,MAdf,WACE,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAAlB,sBACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UCFUgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ebdf2589.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst listContext = createContext();\r\n\r\nexport default listContext;","import { SET_LIST } from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case SET_LIST:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const SEARCH_USERS = 'SEARCH_USERS';\r\nexport const GET_USER = 'GET_USER';\r\nexport const CLEAR_USERS = 'CLEAR_USERS';\r\nexport const GET_REPOS = 'GET_REPOS';\r\nexport const SET_LOADING = 'SET_LOADING';\r\nexport const SET_LIST = 'SET_LIST';\r\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\r\n","import React, { useReducer } from \"react\";\r\nimport ListContext from \"./listContext\";\r\nimport ListReducer from \"./listReducer\";\r\nimport { SET_LIST } from \"../types\";\r\n\r\nconst ListState = (props) => {\r\n  const initialState = [];\r\n\r\n  const [state, dispatch] = useReducer(ListReducer, initialState);\r\n\r\n  // Set List\r\n  const setList = (users) => {\r\n    dispatch({\r\n      type: SET_LIST,\r\n      payload: users,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListContext.Provider\r\n      value={{\r\n        list: state,\r\n        setList,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ListContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ListState;\r\n","import { createContext } from 'react';\r\n\r\nconst searchContext = createContext();\r\n\r\nexport default searchContext;","import { SET_LOADING } from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case SET_LOADING:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};","import React, { useReducer } from \"react\";\r\nimport SearchContext from \"./searchContext\";\r\nimport searchReducer from \"./searchReducer\";\r\nimport { SET_LOADING } from \"../types\";\r\n\r\nconst SearchState = (props) => {\r\n  const initialState = false;\r\n\r\n  const [state, dispatch] = useReducer(searchReducer, initialState);\r\n\r\n  // Set Loading\r\n  const setLoading = (loadingState) => {\r\n    dispatch({\r\n      type: SET_LOADING,\r\n      payload: loadingState,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <SearchContext.Provider\r\n      value={{\r\n        loading: state,\r\n        setLoading,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </SearchContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SearchState;\r\n","import React, { useContext } from \"react\";\r\nimport ListContext from \"../context/List/listContext\";\r\nimport SearchContext from \"../context/Search/searchContext\";\r\n\r\nconst List = () => {\r\n  const listContext = useContext(ListContext);\r\n  const searchContext = useContext(SearchContext);\r\n\r\n  const { list } = listContext;\r\n  const { loading } = searchContext;\r\n\r\n  if (loading) {\r\n    return <div className=\"label\">Loading..</div>;\r\n  } else if (list !== null) {\r\n    return list.map((user, index) => {\r\n      return (\r\n        <div className=\"user\" key={user.id}>\r\n          <div className=\"img-block\"></div>\r\n          <img src={user.avatar_url} alt={user.login} />\r\n          <div className=\"userInfo\">\r\n            <p>\r\n              <span className=\"label\">User ID: </span>\r\n              <a href={user.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {user.login}\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\nexport default List;\r\n","import React, { useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport ListContext from \"../context/List/listContext\";\r\nimport SearchContext from \"../context/Search/searchContext\";  \r\n\r\nconst Search = () => {\r\n  const listContext = useContext(ListContext);\r\n  const searchContext = useContext(SearchContext);\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const fetchUser = async () => {\r\n    const res = await axios.get(`https://api.github.com/search/users?q=${text}`);\r\n    listContext.setList(res.data.items);\r\n    searchContext.setLoading(false);\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (text === \"\") {\r\n      return;\r\n    } else {\r\n      searchContext.setLoading(true);\r\n      fetchUser();\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => setText(e.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit} className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"text\"\r\n          placeholder=\"Search Users...\"\r\n          value={text}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Search\"\r\n          className=\"btn btn-dark btn-block\"\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ListState from \"./context/List/listState\";\nimport SearchState from \"./context/Search/searchState\";\nimport List from \"./Components/List\";\nimport Search from \"./Components/Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">GitHub User Finder</header>\n      <SearchState>\n        <ListState>\n          <Search />\n          <List />\n        </ListState>\n      </SearchState>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}